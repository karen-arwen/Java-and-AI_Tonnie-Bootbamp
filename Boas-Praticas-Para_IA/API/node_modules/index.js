// index.js
// API RESTful para gerenciar produtos

const express = require('express');
const Joi = require('joi');
const app = express();
const PORT = 3000;

// Middleware para ler JSON
app.use(express.json());

// Banco de dados em memória
let produtos = [];
let idAtual = 1;

// Esquema de validação com Joi
const produtoSchema = Joi.object({
  nome: Joi.string().min(3).max(100).required(),
  preco: Joi.number().positive().required(),
  descricao: Joi.string().max(255).optional()
});

// Listar todos os produtos
app.get('/produtos', (req, res) => {
  res.json(produtos);
});

// Criar um novo produto
app.post('/produtos', (req, res) => {
  // Validação dos dados de entrada
  const { error, value } = produtoSchema.validate(req.body);
  if (error) {
    return res.status(400).json({ erro: error.details[0].message });
  }
  // Criação do produto
  const novoProduto = { id: idAtual++, ...value };
  produtos.push(novoProduto);
  res.status(201).json(novoProduto);
});

// Editar um produto existente
app.put('/produtos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const produto = produtos.find(p => p.id === id);
  if (!produto) {
    return res.status(404).json({ erro: 'Produto não encontrado' });
  }
  // Validação dos dados de entrada
  const { error, value } = produtoSchema.validate(req.body);
  if (error) {
    return res.status(400).json({ erro: error.details[0].message });
  }
  // Atualização do produto
  produto.nome = value.nome;
  produto.preco = value.preco;
  produto.descricao = value.descricao;
  res.json(produto);
});

// Deletar um produto
app.delete('/produtos/:id', (req, res) => {
  const id = parseInt(req.params.id);
  const index = produtos.findIndex(p => p.id === id);
  if (index === -1) {
    return res.status(404).json({ erro: 'Produto não encontrado' });
  }
  produtos.splice(index, 1);
  res.status(204).send();
});

// Iniciar o servidor
app.listen(PORT, () => {
  console.log(`API rodando em http://localhost:${PORT}`);
});
